local id="$1" ts="$2" cmd="$3" active_path="$4" sha="$5"

#
# Handlers
#

# Own handler for own zcmdr-list - "a" / first action
-zcmdr_action_hg_open_commit_a() {
    local id="$1" mypath="$2" cmd="$3" active_path="$4" sha="$5"
    if [[ "${ZCMDR[INTERACTIVE_COMMENTS]}" = "1" ]]; then
        -zcmdr_stdlib_to_cmd_line "${(q)cmd} =( hg --cwd ${(q)active_path} cat -r $sha ${(q)mypath} ) # $mypath"
    else
        -zcmdr_stdlib_to_cmd_line "${(q)cmd} =( hg --cwd ${(q)active_path} cat -r $sha ${(q)mypath} )"
    fi
}

#
# Main code
#

local -a output             # Parameter with textual output
local -a hgcmd             # Git command to run
local -a hgout             # Unprocessed git output
local -a hgout2            # Just file paths
local -a hgout3            # Just SHAs
integer own_LINE_COUNT=0    # Local line count
integer size idx            # Size of listed tree, iterating index

# *-list* state variables, localized so
# that outer list doesn't get disturbed
local ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN
local ZCMDRLIST_CURRENT_IDX
local ZCMDRLIST_IS_SEARCH_MODE
local ZCMDRLIST_SEARCH_BUFFER
local ZCMDRLIST_TEXT_OFFSET
local ZCMDRLIST_IS_UNIQ_MODE
local ZCMDRLIST_CURRENT_SEGMENT # This variable is responsible for horizontal indexing
local ZCMDRLIST_USER_CURRENT_IDX
local ZCMDRLIST_USER_LAST_ELEMENT
local ZCMDRLIST_REMEMBER_STATE=0 # Don't reuse, remember state
local -A ZCMDRLIST_ACTIVE_SEGMENTS
local ZCMDRLIST_TRACK_SEGMENTS
local -a ZCMDRLIST_ENABLED_EVENTS
local -a ZCMDRLIST_NONSELECTABLE_ELEMENTS
local -a ZCMDRLIST_HOP_INDEXES

# Run git command to list tree of given commit SHA
hgcmd=( hg --cwd "$active_path" manifest -r "$sha" )
hgout=( "${(@f)"$( "${hgcmd[@]}" )"}" )
size="${#hgout[@]}"

# Header
output=( "${CMDR_RED}'Tree ${CMDR_RED_E}${CMDR_YELLOW}${sha[1,7]}${CMDR_YELLOW_E}${CMDR_RED} of ${CMDR_RED_E}${CMDR_YELLOW}${(q)active_path:t}${CMDR_YELLOW_E}${CMDR_RED}'${CMDR_RED_E}" )
own_LINE_COUNT+=1
ZCMDRLIST_NONSELECTABLE_ELEMENTS+=( "$own_LINE_COUNT" )
ZCMDRLIST_HOP_INDEXES+=( "$own_LINE_COUNT" )

#
# Create output
#

for (( idx = 1; idx <= size; idx ++ )); do
    reply=( )
    -zcmdr_stdlib_get_std_button "hopen1A" "${hgout[idx]}" "$selected_editor" "$active_path" "$sha" "${hgout[idx]}" -zcmdr_action_hg_open_commit_a
    output+=( "${reply[1]}" )
done

#
# Invoke the list, handle outcome
#

local ZCMDRLIST_WRAPPER_BIT=""
-zcmdr-usetty-wrapper -zcmdr-list-wrapper "${output[@]}"

if [ -z "$ZCMDRLIST_WRAPPER_BIT" ]; then
    zle && zle .redisplay
    return 1
fi

# ID, data1, data2, data3, data4
if -zcmdr_stdlib_decode_hyperlink "$ZCMDRLIST_WRAPPER_BIT"; then
    local id="${reply[1]}" ts="${reply[2]}" cmd="${reply[3]}" active_path="${reply[4]}" file="${reply[5]}"
    if [[ -n "${ZCMDR_ACTION_IDS_TO_HANDLERS[$id]}" ]]; then
        zle && zle .redisplay
        # Call the handled with all hyper-link data
        "${ZCMDR_ACTION_IDS_TO_HANDLERS[$id]}" "$id" "$ts" "$cmd" "$active_path" "$file"
        break
    fi
fi

# vim:ft=zsh
