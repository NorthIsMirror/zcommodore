#
# $1 - repository path
# $2 - file path
# $3 - file name
#
cmdr_ahistory() {
    if [[ "$1" = "-h" || "$#" = "0" ]]; then
        print "Shows accumulated history for given file"
        print
        print "${fg_bold[green]}Usage:${reset_color} cmdr_ahistory <repo path> <file path> <file name>"
        print
        print "${fg_bold[green]}Example run:${reset_color}"
        print "cmdr_ahistory . . myctags/entry.c"
        print "or:"
        print "cmdr_ahistory . myctags entry.c"
        return 0
    fi

    local repo_path="$1" file_path="$2" file_name="$3"
    local -a revs
    revs=( ${(f)"$( git -C "$repo_path" rev-list --all ${(q)file_path}/${(q)file_name} 2>/dev/null )"} )

    local pager_cmd
    zstyle -s ":plugin:zcommodore" pager_cmd pager_cmd || pager_cmd="less -iR"

    integer idx size="${#revs[@]}"
    for (( idx = 2; idx <= size; idx ++ )); do
        print "${fg[yellow]}commit ${revs[1]}${reset_color}"
        print "${fg[yellow]}commit ${revs[idx]}${reset_color}"

        git -C "$repo_path" diff --color "${revs[idx]}" "${revs[1]}" -- ${(q)file_path}/${(q)file_name}
        print
    done | ${=pager_cmd}
}

#
# $1 - repository path
# $2 - file path
# $3 - file name
#
cmdr_store_as_object() {
    if [[ "$1" = "-h" || "$#" = "0" ]]; then
        print "Stores given file as BLOB into Git repository. SHA hash"
        print "is generated so that you can retrieve the file with:"
        print "    git cat-file -p <SHA>"
        print "The SHA is appended to stored_objects.lst. The BLOB will"
        print "be removed by regular Git garbage collecting, as it is"
        print "unreferenced, after 14 days (default), if git gc will be"
        print "run."
        print
        print "${fg_bold[green]}Usage:${reset_color} cmdr_store_as_object <repo path> <file path> <file name>"
        print
        print "${fg_bold[green]}Example run:${reset_color}"
        print "cmdr_store_as_object . . myctags/entry.c"
        print "or:"
        print "cmdr_store_as_object . myctags entry.c"
        return 0
    fi

    local repo_path="$1" file_path="$2" file_name="$3"

    local sha=$( git -C "$repo_path" hash-object -w "$file_path/$file_name" )

    -zcmdr_stdlib_get_date_and_time_string

    echo "$sha $REPLY ${(q)file_name}" >>! "$repo_path/stored_objects.lst"
    echo "Created BLOB for \`$file_name': ${fg_bold[green]}$sha${reset_color}"
    echo "Saved this SHA into stored_objects.lst"
    echo "To retrieve the file run: git cat-file -p $sha"
}

#
# Creates backup directory.
# Echoes it when no "-s" option
#

cmdr_bdir() {
    if [[ "$1" = "-h" ]]; then
        print "Creates backup directory according to Zstyle setting:"
        print "zstyle \":plugin:zcommodore\" backup_dir {path}"
        return 0
    fi

    zstyle -s ":plugin:zcommodore" backup_dir dest || dest="$HOME/.backup"

    integer existed=0
    [[ -d "$dest" ]] && existed=1 || mkdir -p "$dest"

    [[ "$1" != "-s" && "$existed" -eq "0" ]] && print "Created backup directory: $dest"
    [[ "$1" != "-s" && "$existed" -eq "1" ]] && print "Backup directory exists: $dest"
}

cmdr_same_files() {
    if [[ "$1" = "-h" || "$#" = "0" ]]; then
        print -- "Searches for commits that alter the same set of files as input commit"
        print -- "${fg_bold[green]}Usage:${reset_color} cmdr_same_files [-e] <repo path> <commit sha>"
        print
        print -- "-e Commits modifying EXACTLY the same files, never more than them"
        print
        print -- "${fg_bold[green]}Example run:${reset_color}"
        print -- "cmdr_same_files -e . f393004"
        print -- "or"
        print -- "cmdr_same_files -e ~/github/myproject f393004"
        return 0
    fi

    integer exactly=0
    [[ "$1" = "-e" ]] && exactly=1 && shift

    [[ "$#" -lt 2 ]] && { echo "Two parameters required, repo path and commit sha, aborting."; return 1; }

    (( exactly == 1 )) && print "${fg_bold[red]}Searching for commits modifying EXACTLY (-e) the same files${reset_color}"
    (( exactly == 0 )) && print "${fg_bold[red]}Searching for commits modifying AT LEAST the same files${reset_color}"

    local root_dir="$1"
    local commit="$2"

    [[ ! -d "$root_dir" ]] && { print "Repository dir (first parameter) doesn't exist or isn't directory"; return 1; }

    # Get list of files (3 steps)
    integer nfiles
    local -a files save_files
    files=( ${(f)"$( git -C "$root_dir" show --name-status --no-renames "$commit" 2>/dev/null )"} )
    files=( "${(@M)files:#((#s)[ADM][ADM]#[[:space:]]##*|(#s)[ ][ADM][[:space:]]##*)}" )
    files=( "${files[@]/(#b)(#s)[[:alpha:]]##[[:space:]]##(*)(#e)/${match[1]}}" )
    nfiles="${#files}"
    save_files=( "${files[@]}" )

    [[ "$nfiles" = "0" ]] && { print "No commits found"; return 1; }

    # First revision list
    local -a revlist
    revlist=( ${(f)"$( git -C "$root_dir" rev-list HEAD -- ${files[1]} )"} )
    shift 1 files

    # Following revision lists - do intersections
    local -a revlist2
    local f
    for f in "${files[@]}"; do
        revlist2=( ${(f)"$( git -C "$root_dir" rev-list HEAD -- $f )"} )
        revlist=( "${revlist[@]:*revlist2}" )
    done

    if (( exactly )); then
        # Now for obtained revision list: count files,
        # reject revisions that change more files than
        # the required number
        local rev
        revlist2=()
        for rev in "${revlist[@]}"; do
            files=( ${(f)"$( git -C "$root_dir" show --name-status "$rev" 2>/dev/null )"} )
            files=( "${(@M)files:#(#s)[ADM][[:space:]]##*}" )
            [[ "${#files}" -eq "$nfiles" ]] && revlist2+=( "$rev" )
        done
    else
        revlist2=( "${revlist[@]}" )
    fi

    if [[ "${#revlist2}" = "0" ]]; then
        echo "${fg_bold[green]}No commits modifying the same set of files:${reset_color}"
        print -rl -- "${save_files[@]}"
    else
        git -C "$root_dir" show --stat "${revlist2[@]}"
    fi
}

cmdr_git_filtered_diffs_for() {
    if [[ "$#" -lt 2 ]]; then
        echo "At least two arguments needed, repository path and commit(s)"
        return 1
    fi

    local repo="$1"
    shift

    git -C "$repo" show --format=oneline --abbrev-commit --word-diff=color -p "$@" -- | -zcmdr_stdlib_filter_diff | ${PAGER:-less}
}

ZCMDR[cmdline_sourced]="1"

# vim:ft=zsh
