# $1 - main window name
# $2, $3 - width and height of the window
# $4 - optional status window name
# $5, $6 - width and height of the window
#
# $ZCMDRLIST_NONSELECTABLE_ELEMENTS - array of indexes (1-based) that cannot be selected
# $REPLY is the output variable - contains index (1-based) or -1 when no selection
# $reply (array) is the second part of the output - use the index (REPLY) to get selected element
#
# This function outputs a list of elements that can be navigated with keyboard.
# Besides vertical navigation, it does horizontal navigation over elements of line.
# Uses curses library

emulate -LR zsh

setopt typesetsilent extendedglob noshortloops

_zcmdrlist_has_terminfo=0

zmodload zsh/curses
zmodload zsh/terminfo 2>/dev/null && _zcmdrlist_has_terminfo=1

trap "REPLY=-2; reply=(); return" TERM INT QUIT

[[ "${ZCMDR[stdlib_sourced]}" != "1" ]] && source "${ZCMDR_REPO_DIR}/lib/stdlib.lcmdr"

# Outputs a message in the bottom of the screen
-zcmdrlist_status_msg() {
    # -1 for border, -1 for 0-based indexing
    zcurses move "$wname_status" 2 0
    zcurses clear "$wname_status" eol
    zcurses move "$wname_status" 1 2
    zcurses clear "$wname_status" eol
    zcurses string "$wname_status" "$1"
    #status_msg_strlen is localized in caller
    status_msg_strlen=$#1

    if [ -n "$2" ]; then
        local cmd=" Cmd: " wd=" Working dir: "
        zcurses string "$wname_status" "$cmd"
        zcurses attr "$wname_status" "red/$background"
        zcurses string "$wname_status" "$2"
        zcurses attr "$wname_status" "$colorpair"
        if [[ -n "$3" ]]; then
            zcurses string "$wname_status" "$wd"
            zcurses attr "$wname_status" "green/$background"
            zcurses string "$wname_status" "$3"
            zcurses attr "$wname_status" "$colorpair"
        fi
        (( status_msg_strlen += ${#cmd} + ${#2} + ${#wd} + ${#3} ))
    fi
}

# $1 is window name, $2 is the expected cursor state (0 invisible, 1 visible)
# Prefer tput, then module terminfo
-zcmdrlist_cursor_visibility() {
    # If $1 = plain, then just output the
    # codes without any state management
    if [ "$1" != "plain" ]; then
        # Don't change already set cursor state
        [ "$cursor_state[$1]" = "$2" ] && return
        cursor_state[$1]="$2"
    fi

    if type tput 2>/dev/null 1>&2; then
        [ "$2" = "1" ] && { tput cvvis; tput cnorm }
        [ "$2" = "0" ] && tput civis
    elif [ "$_zcmdrlist_has_terminfo" = "1" ]; then
        [ "$2" = "1" ] && { [ -n $terminfo[cvvis] ] && echo -n $terminfo[cvvis];
                           [ -n $terminfo[cnorm] ] && echo -n $terminfo[cnorm] }
        [ "$2" = "0" ] && [ -n $terminfo[civis] ] && echo -n $terminfo[civis]
    fi 
}

-zcmdrlist_compute_user_vars_difference() {
        if [[ "${(t)ZCMDRLIST_NONSELECTABLE_ELEMENTS}" != "array" &&
                "${(t)ZCMDRLIST_NONSELECTABLE_ELEMENTS}" != "array-local" ]]
        then
            last_element_difference=0
            current_difference=0
        else
            last_element_difference=$#ZCMDRLIST_NONSELECTABLE_ELEMENTS
            current_difference=0
            local idx
            for idx in "${(n)ZCMDRLIST_NONSELECTABLE_ELEMENTS[@]}"; do
                [ "$idx" -le "$ZCMDRLIST_CURRENT_IDX" ] && current_difference+=1 || break
            done
        fi
}

# List was processed, check if variables aren't off range
-zcmdrlist_verify_vars() {
    [ "$ZCMDRLIST_CURRENT_IDX" -gt "$last_element" ] && ZCMDRLIST_CURRENT_IDX="$last_element"
    [[ "$ZCMDRLIST_CURRENT_IDX" -eq 0 && "$last_element" -ne 0 ]] && ZCMDRLIST_CURRENT_IDX=1

    # Verify that element is just visible, if not then compute exact page
    if [[ "$ZCMDRLIST_CURRENT_IDX" -lt "$ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN" ||
        "$ZCMDRLIST_CURRENT_IDX" -gt "$(( ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN + page_height + 1 ))" ]]
    then
        (( ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN = ((ZCMDRLIST_CURRENT_IDX-1)/page_height) * page_height + 1 ))
    fi
}

# Compute the variables which are shown to the user
-zcmdrlist_setup_user_vars() {
    if [ "$1" = "1" ]; then
        # Basic values when there are no non-selectables
        ZCMDRLIST_USER_CURRENT_IDX="$ZCMDRLIST_CURRENT_IDX"
        ZCMDRLIST_USER_LAST_ELEMENT="$last_element"
    else
        -zcmdrlist_compute_user_vars_difference
        ZCMDRLIST_USER_CURRENT_IDX=$(( ZCMDRLIST_CURRENT_IDX - current_difference ))
        ZCMDRLIST_USER_LAST_ELEMENT=$(( last_element - last_element_difference ))
    fi
}

# Functionality inherited from n-list: ability to colorify
# selected keywords (via ZCMDRLIST_COLORING_PATTERN). Here
# it uses color mark (\6) inseted of direct usage of ANSI
# color codes
#
-zcmdrlist_colorify_disp_list() {
    local col=$'\6' reset=$'\31'
    [ -n "$ZCMDRLIST_COLORING_COLOR" ] && col="$ZCMDRLIST_COLORING_COLOR"
    [ -n "$ZCMDRLIST_COLORING_END_COLOR" ] && reset="$ZCMDRLIST_COLORING_END_COLOR"

    if [ "$ZCMDRLIST_COLORING_MATCH_MULTIPLE" -eq 1 ]; then
        disp_list=( "${(@)disp_list//(#mi)$~ZCMDRLIST_COLORING_PATTERN/$col${MATCH}$reset}" )
    else
        disp_list=( "${(@)disp_list/(#mi)$~ZCMDRLIST_COLORING_PATTERN/$col${MATCH}$reset}" )
    fi
}

# Changes color marks (\3, \4, \5, \6, \7) into ANSI color codes (green, yellow, magenta, cyan, red)
-zcmdrlist_translate_color_marks_in_disp_list() {
    local ACC_RESET=$'\e[0m' ACC_RED=$'\e[0;31m' ACC_GREEN=$'\e[0;32m'
    local ACC_YELLOW=$'\e[1;33m' ACC_MAGENTA=$'\e[0;35m' ACC_CYAN=$'\e[0;36m'

    disp_list=( "${disp_list[@]//(#b)$'\3'([^$'\31']#)$'\31'/$ACC_GREEN$match[1]$ACC_RESET}" )
    disp_list=( "${disp_list[@]//(#b)$'\4'([^$'\31']#)$'\31'/$ACC_YELLOW$match[1]$ACC_RESET}" )
    disp_list=( "${disp_list[@]//(#b)$'\5'([^$'\31']#)$'\31'/$ACC_MAGENTA$match[1]$ACC_RESET}" )
    disp_list=( "${disp_list[@]//(#b)$'\6'([^$'\31']#)$'\31'/$ACC_CYAN$match[1]$ACC_RESET}" )
    disp_list=( "${disp_list[@]//(#b)$'\7'([^$'\31']#)$'\31'/$ACC_RED$match[1]$ACC_RESET}" )
}

# Changes color marks (\3, \4, \5, \6, \7) into ANSI color codes (green, yellow, magenta, cyan, red)
#
# $1 - buffer to operate on
# $REPLY - modified buffer
#
-zcmdrlist_translate_color_marks() {
    local ACC_RESET=$'\e[0m' ACC_RED=$'\e[0;31m' ACC_GREEN=$'\e[0;32m'
    local ACC_YELLOW=$'\e[1;33m' ACC_MAGENTA=$'\e[0;35m' ACC_CYAN=$'\e[0;36m'

    local buf="$1"

    buf=( "${buf//(#b)$'\3'([^$'\31']#)$'\31'/$ACC_GREEN$match[1]$ACC_RESET}" )
    buf=( "${buf//(#b)$'\4'([^$'\31']#)$'\31'/$ACC_YELLOW$match[1]$ACC_RESET}" )
    buf=( "${buf//(#b)$'\5'([^$'\31']#)$'\31'/$ACC_MAGENTA$match[1]$ACC_RESET}" )
    buf=( "${buf//(#b)$'\6'([^$'\31']#)$'\31'/$ACC_CYAN$match[1]$ACC_RESET}" )
    buf=( "${buf//(#b)$'\7'([^$'\31']#)$'\31'/$ACC_RED$match[1]$ACC_RESET}" )

    REPLY="$buf"
}

# $1 - buffer to operate on
# $2 - target color mark
# $REPLY - modified buffer
#
-zcmdrlist_replace_color_marks_with() {
    local buf="$1" target_mark="$2"
    buf=${buf//$'\3'/$target_mark}
    buf=${buf//$'\4'/$target_mark}
    buf=${buf//$'\5'/$target_mark}
    buf=${buf//$'\6'/$target_mark}

    # No existing replaced marks – then just add the mark
    if [ "${buf/$target_mark/}" = "$buf" ]; then
        buf="${target_mark}${buf}"$'\31'
    fi

    REPLY="$buf"
}

-zcmdrlist_mark_current_segment_in_current_element() {
        # Check if current element is in ZCMDRLIST_NONSELECTABLE_ELEMENTS
        # If yes, don't mark current segment
        [[ -z "$ZCMDRLIST_SEARCH_BUFFER" && "${ZCMDRLIST_NONSELECTABLE_ELEMENTS[(r)$ZCMDRLIST_CURRENT_IDX]}" = "$ZCMDRLIST_CURRENT_IDX" ]] && return

        # There will be no colorifying for current element
        integer ZCMDRLIST_CURRENT_PAGE_IDX=$(( ZCMDRLIST_CURRENT_IDX - ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN + 1 ))
        local element="$list[ZCMDRLIST_CURRENT_IDX]"
        local output=""

        [[ "$ZCMDRLIST_CURRENT_SEGMENT" -lt 1 ]] && ZCMDRLIST_CURRENT_SEGMENT=1
        [[ "$ZCMDRLIST_CURRENT_SEGMENT" -gt "$nseg" ]] && ZCMDRLIST_CURRENT_SEGMENT="$nseg"
        integer active_segment="$ZCMDRLIST_CURRENT_SEGMENT"

        # Prepare output variables for -zcmdr-process-buffer
        local ZCMDR_PB_WORDS="" ZCMDR_PB_WORDS_BEGINNINGS="" ZCMDR_PB_SPACES=""
        local ZCMDR_PB_SELECTED_WORD="" ZCMDR_PB_LEFT="" ZCMDR_PB_RIGHT=""

        # Lets find interesting segment and mark it with bells (\7),
        # that are translated to red color
        -zcmdr-process-buffer "$element"
        integer size="${#ZCMDR_PB_WORDS}" i
        local buf=""
        for (( i=1; i<=size; i++ )); do
            if [[ "$i" -eq "$active_segment" ]]; then
                ZCMDR_PB_WORDS[i]=${ZCMDR_PB_WORDS[i]//$'\n'/\\n}
                -zcmdrlist_replace_color_marks_with "${ZCMDR_PB_WORDS[i]}" $'\7'
                ZCMDR_PB_WORDS[i]="$REPLY"
            fi
            buf+="$ZCMDR_PB_SPACES[i]$ZCMDR_PB_WORDS[i]"
        done
        buf+="$ZCMDR_PB_SPACES[i]"

        -zcmdrlist_translate_color_marks "$buf"
        disp_list2[ZCMDRLIST_CURRENT_PAGE_IDX]="$REPLY"
}

#
# Main code
#

# Check if there is proper input
if [ "$#" -lt 1 ]; then
    echo "Usage: -zcmdr-list element_1 ..."
    return 1
fi

REPLY="-1"
typeset -ga reply
reply=()

local wname_main="$1"
integer main_height="$2"
integer main_width="$3"
local wname_status="$4"
integer status_height="$5"
integer status_width="$6"
integer page_height=main_height-2
integer page_width=main_width-2
local header="$7"
local mark_header="$8"

shift 8

typeset -a list disp_list disp_list2
integer last_element=$#
local action
local final_key
integer selection
integer last_element_difference=0
integer current_difference=0
local prev_search_buffer=""
integer prev_uniq_mode=0
integer prev_start_idx=-1
local MBEGIN MEND MATCH mbegin mend match
integer nseg
typeset -A "cursor_state"
cursor_state=( "main" 1 "status" 1 )

# Load configuration
local colorpair border bold
zstyle -s ":plugin:zcommodore" colorpair colorpair
zstyle -b ":plugin:zcommodore" border border
zstyle -b ":plugin:zcommodore" bold bold
[ "$colorpair" = "" ] && colorpair="white/black"
[ "$border" = "no" ] && border="0" || border="1"
[ "$bold" = "yes" ] && bold="1" || bold="0"
local background="${colorpair#*/}"
local backuptheme="$colorpair/$bold"
zcurses bg "$wname_main" "$colorpair"
zcurses bg "$wname_status" "$colorpair"

[[ "$bold" = "1" || "$bold" = "+bold" ]] && bold="+bold" || bold="-bold"

# Ability to remember the list between calls
if [[ -z "$ZCMDRLIST_REMEMBER_STATE" || "$ZCMDRLIST_REMEMBER_STATE" -eq 0 || "$ZCMDRLIST_REMEMBER_STATE" -eq 2 ]]; then
    ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN=1
    ZCMDRLIST_CURRENT_IDX=1
    ZCMDRLIST_IS_SEARCH_MODE=0
    ZCMDRLIST_SEARCH_BUFFER=""
    ZCMDRLIST_TEXT_OFFSET=0
    ZCMDRLIST_IS_UNIQ_MODE=0
    ZCMDRLIST_CURRENT_SEGMENT=1 # This variable is responsible for horizontal indexing
    ZCMDRLIST_ACTIVE_SEGMENTS=()

    # Zero - because it isn't known, unless we
    # confirm that first element is selectable
    ZCMDRLIST_USER_CURRENT_IDX=0
    [[ ${ZCMDRLIST_NONSELECTABLE_ELEMENTS[(r)1]} != 1 ]] && ZCMDRLIST_USER_CURRENT_IDX=1
    ZCMDRLIST_USER_LAST_ELEMENT=$(( last_element - $#ZCMDRLIST_NONSELECTABLE_ELEMENTS ))

    # 2 is init once, then remember
    [ "$ZCMDRLIST_REMEMBER_STATE" -eq 2 ] && ZCMDRLIST_REMEMBER_STATE=1
else
    # Recompute ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN
    # in case it was manually altered outside the list
    # Together with this verify variables
    -zcmdrlist_verify_vars
fi

if [ "$ZCMDRLIST_START_IN_SEARCH_MODE" -eq 1 ]; then
    ZCMDRLIST_START_IN_SEARCH_MODE=0
    ZCMDRLIST_IS_SEARCH_MODE=1
fi

if [ -n "$ZCMDRLIST_SET_SEARCH_TO" ]; then
    ZCMDRLIST_SEARCH_BUFFER="$ZCMDRLIST_SET_SEARCH_TO"
    ZCMDRLIST_SET_SEARCH_TO=""
fi

if [ "$ZCMDRLIST_START_IN_UNIQ_MODE" -eq 1 ]; then
    ZCMDRLIST_START_IN_UNIQ_MODE=0
    ZCMDRLIST_IS_UNIQ_MODE=1
fi

#
# Listening for input
#

local key keypad

# Clear input buffer
zcurses timeout main 0
zcurses input main key keypad
zcurses timeout main -1
key=""
keypad=""

# This loop makes script faster on some Zsh's (e.g. 5.0.8)
repeat 1; do
    list=( "$@" )
done

last_element="$#list"

while (( 1 )); do
    # Do searching (filtering with string)
    if [ -n "$ZCMDRLIST_SEARCH_BUFFER" ]; then
        # Compute new list?
        if [[ "$ZCMDRLIST_SEARCH_BUFFER" != "$prev_search_buffer" || "$ZCMDRLIST_IS_UNIQ_MODE" -ne "$prev_uniq_mode" || "$ZCMDRLIST_REGENERATE_DISP_LIST" = "1" ]]
        then
            prev_search_buffer="$ZCMDRLIST_SEARCH_BUFFER"
            prev_uniq_mode="$ZCMDRLIST_IS_UNIQ_MODE"
            # regenerating list -> regenerating disp_list
            prev_start_idx=-1

            # Take all elements, including duplicates and non-selectables
            typeset +U list
            repeat 1; do
                list=( "$@" )
            done

            # Remove non-selectable elements
            [ "$#ZCMDRLIST_NONSELECTABLE_ELEMENTS" -gt 0 ] && for i in "${(nO)ZCMDRLIST_NONSELECTABLE_ELEMENTS[@]}"; do
                list[$i]=()
            done

            # Remove duplicates
            [ "$ZCMDRLIST_IS_UNIQ_MODE" -eq 1 ] && typeset -U list

            last_element="$#list"

            # Next do the filtering
            local search_buffer="${ZCMDRLIST_SEARCH_BUFFER%% ##}"
            search_buffer="${search_buffer## ##}"
            search_buffer="${search_buffer//(#m)[][*?|#~^()><\\]/\\$MATCH}"
            local search_pattern=""
            local colsearch_pattern=""
            if [ -n "$search_buffer" ]; then
                # The base bit of this pattern is ((#s)[^$'\1']#THEWORD*|*$'\2'[^$'\1']#THEWORD*) - the word
                # occuring not inside hyper link
                # Pattern will be ((#s)[^$'\1']#FOO*|*$'\2'[^$'\1']#FOO*)~^((#s)[^$'\1']#BAR*|*$'\2'[^$'\1']#BAR*...)
                # ~^ means: "not those that have not this"
                search_pattern=${search_buffer//(#b)([^ ]##)/((#s)[^$'\1']#$match[1]*|*$'\2'[^$'\1']#$match[1]*)~^}
                search_pattern="${search_pattern// ##/}"
                search_pattern="${search_pattern%\~\^}"
                # Pattern will be (foo|bar)
                colsearch_pattern="${search_buffer// ##/|}"

                # The repeat will make the matching work on a fresh heap
                repeat 1; do
                    list=( "${(@M)list:#(#i)$~search_pattern}" )
                done

                last_element="$#list"
            fi

            # Called after processing list
            -zcmdrlist_verify_vars
        fi

        -zcmdrlist_setup_user_vars 1
        typeset -a tmp
        tmp=( "${(z)list[ZCMDRLIST_CURRENT_IDX]}" )
        nseg="$#tmp"

        integer end_idx=$(( ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN + page_height - 1 ))
        [ "$end_idx" -gt "$last_element" ] && end_idx=last_element

        if [ "$prev_start_idx" -ne "$ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN" ]; then
            prev_start_idx="$ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN"
            disp_list=( "${(@)list[ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN, end_idx]}" )

            if [ -n "$colsearch_pattern" ]; then
                local col=$'\5' reset=$'\31'
                # The repeat will make the matching work on a fresh heap
                repeat 1; do
                    disp_list=( ${(@)disp_list//(#mi)($~colsearch_pattern)/$col${MATCH}$reset} )
                    # [Mark][Text][Red-Mark][Text2][Close]... -> [Mark][Text][Close][Red-Mark][Text2][Close][Mark]
                    # I.e. provide [Close] before [Red-Mark] and [Mark] after red's [Close]
                    while (( 1 )); do
                        match=()
                        disp_list=( ${(@)disp_list//(#b)([$'\3'$'\4'$'\5'$'\6'])([^$'\31']#)$'\5'([^$'\31']#)$'\31'/$match[1]$match[2]$'\31'$'\5'$match[3]$'\31'$match[1]} )
                        [ -z "${match[1]}" ] && break
                    done
                done
            fi
            # We translate color marks into color codes. list still contains marks,
            # and -zcmdrlist_mark_current_segment_in_current_element will be able
            # to restore current element into marks, to switch colors of active
            # segment
            -zcmdrlist_translate_color_marks_in_disp_list
        fi

        # We need second disp_list to be able to disable colorifying for particular elements
        disp_list2=( "${(@)disp_list}" )

        [ "$#disp_list2" -gt 0 ] && -zcmdrlist_mark_current_segment_in_current_element

        # Remove hyperlinks before displaying
        disp_list2=( "${disp_list2[@]//$'\1'[^$'\1']#$'\1'[^$'\1']#$'\1'[^$'\1']#$'\1'[^$'\1']#$'\1'[^$'\1']#$'\2'/}" )

        # Output colored list
        -zcmdr-list-draw "$(( ZCMDRLIST_CURRENT_IDX - ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN + 1 ))" \
            "$page_height" "$page_width" 1 2 "$ZCMDRLIST_TEXT_OFFSET" "$wname_main" \
            "$disp_list2[@]"
    else
        # There is no search, but there was in previous loop
        # OR
        # Uniq mode was entered or left out
        # -> compute new list
        if [[ -n "$prev_search_buffer" || "$ZCMDRLIST_IS_UNIQ_MODE" -ne "$prev_uniq_mode" || "$ZCMDRLIST_REGENERATE_DISP_LIST" = "1" ]]
        then
            prev_search_buffer=""
            prev_uniq_mode="$ZCMDRLIST_IS_UNIQ_MODE"
            # regenerating list -> regenerating disp_list
            prev_start_idx=-1

            # Take all elements, including duplicates and non-selectables
            typeset +U list
            repeat 1; do
                list=( "$@" )
            done

            # Remove non-selectable elements only when in uniq mode
            [ "$ZCMDRLIST_IS_UNIQ_MODE" -eq 1 ] && [ "$#ZCMDRLIST_NONSELECTABLE_ELEMENTS" -gt 0 ] &&
            for i in "${(nO)ZCMDRLIST_NONSELECTABLE_ELEMENTS[@]}"; do
                list[$i]=()
            done

            # Remove duplicates when in uniq mode
            [ "$ZCMDRLIST_IS_UNIQ_MODE" -eq 1 ] && typeset -U list

            last_element="$#list"
            # Called after processing list
            -zcmdrlist_verify_vars
        fi

        # "1" - shouldn't bother with non-selectables
        -zcmdrlist_setup_user_vars "$ZCMDRLIST_IS_UNIQ_MODE"
        typeset -a tmp
        tmp=( "${(z)list[ZCMDRLIST_CURRENT_IDX]}" )
        nseg="$#tmp"

        integer end_idx=$(( ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN + page_height - 1 ))
        [ "$end_idx" -gt "$last_element" ] && end_idx=last_element

        if [ "$prev_start_idx" -ne "$ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN" ]; then
            prev_start_idx="$ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN"
            disp_list=( "${(@)list[ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN, end_idx]}" )

            # We translate color marks into color codes. list still contains marks,
            # and -zcmdrlist_mark_current_segment_in_current_element will be able
            # to restore current element into marks, to switch colors of active
            # segment
            -zcmdrlist_translate_color_marks_in_disp_list

            [ -n "$ZCMDRLIST_COLORING_PATTERN" ] && -zcmdrlist_colorify_disp_list
        fi

        # We need second disp_list to be able to disable colorifying for particular elements
        disp_list2=( "${(@)disp_list}" )

        [ "$#disp_list2" -gt 0 ] && -zcmdrlist_mark_current_segment_in_current_element

        # Remove hyperlinks before displaying
        disp_list2=( "${disp_list2[@]//$'\1'[^$'\1']#$'\1'[^$'\1']#$'\1'[^$'\1']#$'\1'[^$'\1']#$'\1'[^$'\1']#$'\2'/}" )

        # Output the list
        -zcmdr-list-draw "$(( ZCMDRLIST_CURRENT_IDX - ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN + 1 ))" \
            "$page_height" "$page_width" 1 2 "$ZCMDRLIST_TEXT_OFFSET" "$wname_main" \
            "$disp_list2[@]"
    fi

    [[ "$mark_header" = "1" && "$colorpair" = "white/black" ]] && zcurses attr "$wname_main" "$bold" "magenta/$background"
    [ "$border" = "1" ] && zcurses border "$wname_main"
    zcurses move "$wname_main" 0 2
    zcurses string "$wname_main" "$header"
    [[ "$mark_header" = "1" && "$colorpair" = "white/black" ]] && zcurses attr "$wname_main" "$bold" "$colorpair"
    -zcmdrlist_cursor_visibility "main" "0"
    zcurses refresh "$wname_main"

    # Status window is optional (1/2)
    [ -n "$wname_status" ] && {
        local st_path="" st_cmd=""
        if -zcmdr_stdlib_decode_hyperlink "${tmp[$ZCMDRLIST_CURRENT_SEGMENT]}"; then
            st_cmd="${(Q)reply[3]}"
            [[ -n "${(Q)reply[1]}" ]] && st_path="${(Q)reply[4]}"

            if [ "${reply[2]}" != "${reply[2]/-1/}" ]; then
                local -a st_qopts_qpaths
                st_qopts_qpaths=( "${(z@)reply[5]}" )

                local st_opts_concat="${(Q)st_qopts_qpaths[1]}"
                local st_paths_concat="${(Q)st_qopts_qpaths[2]}"

                local -a st_opts st_paths
                st_opts=( "${(z@)st_opts_concat}" )
                st_opts=( "${(Q)st_opts[@]}" )
                st_paths=( "${(z@)st_paths_concat}" )
                st_paths=( "${(Q)st_paths[@]}" )

                if [[ "${#st_opts}" = "0" || ( "${#st_opts}" = "1" && "${st_opts[1]}" = "" ) ]]; then
                    st_cmd="${reply[3]} ${st_paths[*]}"
                else
                    st_cmd="${reply[3]} ${st_opts[*]} ${st_paths[*]}"
                fi
            fi
        fi

        local status_msg_strlen
        if [ "$ZCMDRLIST_IS_SEARCH_MODE" = "1" ]; then
            local _txt2=""
            [ "$ZCMDRLIST_IS_UNIQ_MODE" -eq 1 ] && _txt2="[-UNIQ-] "
            -zcmdrlist_status_msg "${_txt2}Filtering with: ${ZCMDRLIST_SEARCH_BUFFER// /+}"
        elif [[ ${ZCMDRLIST_NONSELECTABLE_ELEMENTS[(r)$ZCMDRLIST_CURRENT_IDX]} != $ZCMDRLIST_CURRENT_IDX ||
                -n "$ZCMDRLIST_SEARCH_BUFFER" || "$ZCMDRLIST_IS_UNIQ_MODE" -eq 1 ]]; then
            local _txt="" _txt2=""
            [ -n "$ZCMDRLIST_GREP_STRING" ] && _txt=" [$ZCMDRLIST_GREP_STRING]"
            [ -n "$ZCMDRLIST_GENERATION_TIME" ] && _txt="$_txt GENERATED IN ${ZCMDRLIST_GENERATION_TIME}s" && ZCMDRLIST_GENERATION_TIME=""
            [ "$ZCMDRLIST_IS_UNIQ_MODE" -eq 1 ] && _txt2="[-UNIQ-] "
            -zcmdrlist_status_msg "${_txt2}Current #$ZCMDRLIST_USER_CURRENT_IDX (of #$ZCMDRLIST_USER_LAST_ELEMENT entries)${_txt}" "${st_cmd}" "${st_path}"
        else
            local _txt3
            [ -n "$ZCMDRLIST_GENERATION_TIME" ] && _txt3="GENERATED IN ${ZCMDRLIST_GENERATION_TIME}s" && ZCMDRLIST_GENERATION_TIME=""
            -zcmdrlist_status_msg "$_txt3"
        fi

        [ "$border" = "1" ] && zcurses border "$wname_status"
        # status_msg_strlen is set in -zcmdrlist_status_msg()
        zcurses move "$wname_status" 1 $(( status_msg_strlen + 2 ))
        [ "$ZCMDRLIST_IS_SEARCH_MODE" -ne 1 ] && -zcmdrlist_cursor_visibility "status" "0" || -zcmdrlist_cursor_visibility "status" "1"
        zcurses refresh "$wname_status" 
    }

    # Draw only?
    [ "$ZCMDRLIST_DRAW_ONLY" = "1" ] && return

    # Wait for input
    zcurses input main key keypad

    # Get the special (i.e. "keypad") key or regular key
    if [ -n "$key" ]; then
        final_key="$key"
    elif [ -n "$keypad" ]; then
        final_key="$keypad"
    else
        [ -n "$wname_status" ] && {
            -zcmdrlist_status_msg "Inproper input detected"
            zcurses refresh "$wname_status"
            sleep 2
        }
    fi

    integer track_cur_idx="$ZCMDRLIST_CURRENT_IDX"
    -zcmdr-list-input "$ZCMDRLIST_CURRENT_IDX" "$ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN" \
                    "$page_height" "$page_width" "$last_element" "$nseg" "$ZCMDRLIST_TEXT_OFFSET" \
                    "$final_key" "$ZCMDRLIST_IS_SEARCH_MODE" "$ZCMDRLIST_SEARCH_BUFFER" \
                    "$ZCMDRLIST_IS_UNIQ_MODE" "$ZCMDRLIST_DISABLE_SEARCH"

    selection="$reply[1]"
    action="$reply[2]"
    ZCMDRLIST_CURRENT_IDX="$reply[3]"
    ZCMDRLIST_FROM_WHAT_IDX_LIST_IS_SHOWN="$reply[4]"
    ZCMDRLIST_TEXT_OFFSET="$reply[5]"
    ZCMDRLIST_IS_SEARCH_MODE="$reply[6]"
    ZCMDRLIST_SEARCH_BUFFER="$reply[7]"
    ZCMDRLIST_IS_UNIQ_MODE="$reply[8]"

    if [ "$ZCMDRLIST_TRACK_SEGMENTS" = "1" ]; then
        # Remember segment change (element change and segment
        # change cannot occur at the same time)
        ZCMDRLIST_ACTIVE_SEGMENTS[$track_cur_idx]="$ZCMDRLIST_CURRENT_SEGMENT"

        if [[ "$track_cur_idx" != "$ZCMDRLIST_CURRENT_IDX" ]]; then
            # Restore segment or set to 1
            if (( ${+ZCMDRLIST_ACTIVE_SEGMENTS[$ZCMDRLIST_CURRENT_IDX]} )); then
                ZCMDRLIST_CURRENT_SEGMENT="${ZCMDRLIST_ACTIVE_SEGMENTS[$ZCMDRLIST_CURRENT_IDX]}"
            else
                ZCMDRLIST_CURRENT_SEGMENT=1
            fi
        fi
    fi

    if [ "$action" = "SELECT" ]; then
        REPLY="$selection"
        reply=( "$list[@]" )
        break
    elif [[ "$action" = F[1-4] ]]; then
        REPLY="$action"
        reply=( "$list[@]" )
        break
    elif [[ "$action" = "BR_MOVE_LEFT" || "$action" = "BR_MOVE_RIGHT" ]]; then
        REPLY="$action"
        reply=( "$list[@]" )
        break
    elif [ "$action" = "QUIT" ]; then
        REPLY=-1
        reply=( "$list[@]" )
        break
    elif [ "$action" = "REDRAW" ]; then
        zcurses clear "$wname_main" redraw
        # Status window is optional (2/2)
        [ -n "$wname_status" ] && zcurses clear "$wname_status" redraw
    else
        if [[ -n "$ZCMDRLIST_REPLY_LIST_PART_SIZE" && "$ZCMDRLIST_REPLY_LIST_PART_SIZE" -ge "1" ]]; then
            set "${(@)@[1,ZCMDRLIST_REPLY_HEADER_IDX-1]}" "${ZCMDRLIST_REPLY_LIST_PART[@]}" "${(@)@[ZCMDRLIST_REPLY_HEADER_IDX+ZCMDRLIST_REPLY_TO_OVERWRITE_SIZE,-1]}"
            typeset -g ZCMDRLIST_REGENERATE_DISP_LIST
            ZCMDRLIST_REGENERATE_DISP_LIST="1"

            # How many elements push down (up if negative)
            # indices that are after the modified section
            integer size_diff=$(( ZCMDRLIST_REPLY_LIST_PART_SIZE - ZCMDRLIST_REPLY_TO_OVERWRITE_SIZE ))

            # Remove indices that lay inside the block being overwritten
            # NONSELECTABLES
            local index el
            integer mysize
            mysize="${#ZCMDRLIST_NONSELECTABLE_ELEMENTS[@]}"
            for (( index = 1; index <= mysize; index ++ )); do
                el="${ZCMDRLIST_NONSELECTABLE_ELEMENTS[index]}"
                if [[ "$el" -ge "$ZCMDRLIST_REPLY_HEADER_IDX" &&
                        "$el" -le "$(( ZCMDRLIST_REPLY_HEADER_IDX + ZCMDRLIST_REPLY_TO_OVERWRITE_SIZE - 1 ))" ]]
                then
                    ZCMDRLIST_NONSELECTABLE_ELEMENTS[index]=()
                fi
            done

            # Push down (up) elements that are after the growed (shrinked) section
            # NONSELECTABLES
            mysize="${#ZCMDRLIST_NONSELECTABLE_ELEMENTS[@]}"
            for (( index = 1; index <= mysize; index ++ )); do
                el="${ZCMDRLIST_NONSELECTABLE_ELEMENTS[index]}"
                # No need to check if it lays inside the range
                # as ones that did have been removed above
                if [[ "$el" -gt "$ZCMDRLIST_REPLY_HEADER_IDX" ]]; then
                    (( ZCMDRLIST_NONSELECTABLE_ELEMENTS[index] += size_diff ))
                fi
            done

            # Remove indices that lay inside the block being overwritten
            # HOPS
            mysize="${#ZCMDRLIST_HOP_INDEXES[@]}"
            for (( index = 1; index <= mysize; index ++ )); do
                el="${ZCMDRLIST_HOP_INDEXES[index]}"
                if [[ "$el" -ge "$ZCMDRLIST_REPLY_HEADER_IDX" &&
                        "$el" -le "$(( ZCMDRLIST_REPLY_HEADER_IDX + ZCMDRLIST_REPLY_TO_OVERWRITE_SIZE - 1 ))" ]]
                then
                    ZCMDRLIST_HOP_INDEXES[index]=()
                fi
            done

            # Push down (up) elements that are after the growed (shrinked) section
            # HOPS
            mysize="${#ZCMDRLIST_HOP_INDEXES[@]}"
            for (( index = 1; index <= mysize; index ++ )); do
                el="${ZCMDRLIST_HOP_INDEXES[index]}"
                # No need to check if it lays inside the range
                # as ones that did have been removed above
                if [[ "$el" -gt "$ZCMDRLIST_REPLY_HEADER_IDX" ]]; then
                    (( ZCMDRLIST_HOP_INDEXES[index] += size_diff ))
                fi
            done

            # Now add new hops and nonselectables
            # first translating to global indices
            ZCMDRLIST_REPLY_NONSELECTABLES=( "${ZCMDRLIST_REPLY_NONSELECTABLES[@]//(#b)([[:digit:]]##)/$(( ${match[1]} + ZCMDRLIST_REPLY_HEADER_IDX - 1 ))}" )
            ZCMDRLIST_REPLY_HOPS=( "${ZCMDRLIST_REPLY_HOPS[@]//(#b)([[:digit:]]##)/$(( ${match[1]} + ZCMDRLIST_REPLY_HEADER_IDX - 1 ))}" )

            ZCMDRLIST_NONSELECTABLE_ELEMENTS+=( "${ZCMDRLIST_REPLY_NONSELECTABLES[@]}" )
            ZCMDRLIST_HOP_INDEXES+=( "${ZCMDRLIST_REPLY_HOPS[@]}" )

            # Last thing: update anchors
            local -a asegs
            asegs=( "${(z@)1}" )
            mysize="${#asegs}"
            local aseg
            for (( index = 1; index <= mysize; index ++ )); do
                aseg="${asegs[index]}"
                [[ -z "$aseg" ]] && continue
                -zcmdr_stdlib_decode_hyperlink "$aseg"
                local _id="${reply[1]}" _idx="${reply[2]}" _cmd="${reply[3]}" _active_path="${reply[4]}" _section_size="${reply[5]}"
                if [[ "$_idx" -gt "$ZCMDRLIST_REPLY_HEADER_IDX" ]]; then
                    # Plainly replace the hyperlink fragment
                    integer _new_idx
                    (( _new_idx = _idx + size_diff ))
                    asegs[index]="${aseg/(#b)($'\1')$_idx$'\1'/${match[1]}$_new_idx${match[1]}}"
                elif [[ "$_idx" = "$ZCMDRLIST_REPLY_HEADER_IDX" ]]; then
                    integer _new_section_size
                    (( _new_section_size = _section_size + size_diff ))
                    asegs[index]="${aseg/(#b)($'\1')$_section_size($'\2')/${match[1]}$_new_section_size${match[2]}}"
                fi
            done
            1="${asegs[*]}"

            # Cleanup
            unset ZCMDRLIST_REPLY_LIST_PART ZCMDRLIST_REPLY_LIST_PART_SIZE ZCMDRLIST_REPLY_NONSELECTABLES
            unset ZCMDRLIST_REPLY_HOPS ZCMDRLIST_REPLY_HEADER_IDX ZCMDRLIST_REPLY_TO_OVERWRITE_SIZE
        elif (( ${+ZCMDRLIST_REPLY_CHECKBOX_NUM} )); then
            local new_line="${@[ZCMDRLIST_REPLY_CHECKBOX_NUM]}"
            [[ "$ZCMDRLIST_REPLY_CHECKBOX_OP" = "set" ]] && new_line="${new_line/\[_\]/[x]}" || new_line="${new_line/\[x\]/[_]}"
            set "${(@)@[1,ZCMDRLIST_REPLY_CHECKBOX_NUM-1]}" "$new_line" "${(@)@[ZCMDRLIST_REPLY_CHECKBOX_NUM+1,-1]}"
            typeset -g ZCMDRLIST_REGENERATE_DISP_LIST="1"
            unset ZCMDRLIST_REPLY_CHECKBOX_NUM ZCMDRLIST_REPLY_CHECKBOX_OP
        fi
    fi
done

# vim: set filetype=zsh:
